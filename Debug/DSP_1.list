
C:\Users\ttche\OneDrive\School Work\EEE4001F Digital Signal Processing\DSP_Project\DSP_1\Debug\DSP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001600  08001600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001604  08001604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000158  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000016c  2000016c  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008c44  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016ee  00000000  00000000  00028c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b88  00000000  00000000  0002a378  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c55  00000000  00000000  0002b980  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035c6  00000000  00000000  0002f5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00032b9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000309c  00000000  00000000  00032c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00035cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800152c 	.word	0x0800152c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800152c 	.word	0x0800152c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002ba:	4313      	orrs	r3, r2
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	4313      	orrs	r3, r2
 80002c0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <ADC_Init+0xa8>)
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002de:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002e4:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002ec:	4313      	orrs	r3, r2
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000306:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	7d1b      	ldrb	r3, [r3, #20]
 800030c:	3b01      	subs	r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	7afb      	ldrb	r3, [r7, #11]
 8000312:	4313      	orrs	r3, r2
 8000314:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000316:	7afb      	ldrb	r3, [r7, #11]
 8000318:	051b      	lsls	r3, r3, #20
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	c0fff7fd 	.word	0xc0fff7fd

08000338 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <ADC_CommonInit+0x48>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <ADC_CommonInit+0x4c>)
 800034e:	4013      	ands	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800035a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000360:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000366:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	4313      	orrs	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <ADC_CommonInit+0x48>)
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	6053      	str	r3, [r2, #4]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40012300 	.word	0x40012300
 8000384:	fffc30e0 	.word	0xfffc30e0

08000388 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d006      	beq.n	80003a8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	f043 0201 	orr.w	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003a6:	e005      	b.n	80003b4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f023 0201 	bic.w	r2, r3, #1
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  }
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	4608      	mov	r0, r1
 80003ca:	4611      	mov	r1, r2
 80003cc:	461a      	mov	r2, r3
 80003ce:	4603      	mov	r3, r0
 80003d0:	70fb      	strb	r3, [r7, #3]
 80003d2:	460b      	mov	r3, r1
 80003d4:	70bb      	strb	r3, [r7, #2]
 80003d6:	4613      	mov	r3, r2
 80003d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	d923      	bls.n	8000430 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	f1a3 020a 	sub.w	r2, r3, #10
 80003f4:	4613      	mov	r3, r2
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	4413      	add	r3, r2
 80003fa:	2207      	movs	r2, #7
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	43db      	mvns	r3, r3
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	4013      	ands	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800040c:	7879      	ldrb	r1, [r7, #1]
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	f1a3 020a 	sub.w	r2, r3, #10
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	e01e      	b.n	800046e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000436:	78fa      	ldrb	r2, [r7, #3]
 8000438:	4613      	mov	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	4413      	add	r3, r2
 800043e:	2207      	movs	r2, #7
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	43db      	mvns	r3, r3
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000450:	7879      	ldrb	r1, [r7, #1]
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	fa01 f303 	lsl.w	r3, r1, r3
 800045e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	4313      	orrs	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800046e:	78bb      	ldrb	r3, [r7, #2]
 8000470:	2b06      	cmp	r3, #6
 8000472:	d821      	bhi.n	80004b8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000478:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	221f      	movs	r2, #31
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	43db      	mvns	r3, r3
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000496:	78f9      	ldrb	r1, [r7, #3]
 8000498:	78bb      	ldrb	r3, [r7, #2]
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004b6:	e047      	b.n	8000548 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80004b8:	78bb      	ldrb	r3, [r7, #2]
 80004ba:	2b0c      	cmp	r3, #12
 80004bc:	d821      	bhi.n	8000502 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80004c4:	78bb      	ldrb	r3, [r7, #2]
 80004c6:	1fda      	subs	r2, r3, #7
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	221f      	movs	r2, #31
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	43db      	mvns	r3, r3
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004e0:	78f9      	ldrb	r1, [r7, #3]
 80004e2:	78bb      	ldrb	r3, [r7, #2]
 80004e4:	1fda      	subs	r2, r3, #7
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000500:	e022      	b.n	8000548 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000508:	78bb      	ldrb	r3, [r7, #2]
 800050a:	f1a3 020d 	sub.w	r2, r3, #13
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	221f      	movs	r2, #31
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	43db      	mvns	r3, r3
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000526:	78f9      	ldrb	r1, [r7, #3]
 8000528:	78bb      	ldrb	r3, [r7, #2]
 800052a:	f1a3 020d 	sub.w	r2, r3, #13
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4313      	orrs	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	609a      	str	r2, [r3, #8]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e001      	b.n	8000596 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	b29b      	uxth	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <DAC_Init+0x64>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80005d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	4013      	ands	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80005f8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80005fe:	4313      	orrs	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	4313      	orrs	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <DAC_Init+0x64>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40007400 	.word	0x40007400

08000628 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d009      	beq.n	800064e <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <DAC_Cmd+0x48>)
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <DAC_Cmd+0x48>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	2001      	movs	r0, #1
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	fa00 f303 	lsl.w	r3, r0, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800064c:	e009      	b.n	8000662 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800064e:	4908      	ldr	r1, [pc, #32]	; (8000670 <DAC_Cmd+0x48>)
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <DAC_Cmd+0x48>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	2001      	movs	r0, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	fa00 f303 	lsl.w	r3, r0, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	4013      	ands	r3, r2
 8000660:	600b      	str	r3, [r1, #0]
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40007400 	.word	0x40007400

08000674 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <DAC_SetChannel1Data+0x34>)
 8000686:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	3308      	adds	r3, #8
 8000690:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	461a      	mov	r2, r3
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40007400 	.word	0x40007400

080006ac <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <DAC_SetChannel2Data+0x34>)
 80006be:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	3314      	adds	r3, #20
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	461a      	mov	r2, r3
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	6013      	str	r3, [r2, #0]
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40007400 	.word	0x40007400

080006e4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <DMA_Init+0xac>)
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800070e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800071a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000726:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000732:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000738:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 0307 	bic.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4313      	orrs	r3, r2
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4313      	orrs	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	691a      	ldr	r2, [r3, #16]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60da      	str	r2, [r3, #12]
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	f01c803f 	.word	0xf01c803f

08000794 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d006      	beq.n	80007b4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f043 0201 	orr.w	r2, r3, #1
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80007b2:	e005      	b.n	80007c0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f023 0201 	bic.w	r2, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	601a      	str	r2, [r3, #0]
  }
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e001      	b.n	80007ee <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <DMA_GetFlagStatus+0x6c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d802      	bhi.n	800081c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <DMA_GetFlagStatus+0x70>)
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e001      	b.n	8000820 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <DMA_GetFlagStatus+0x74>)
 800081e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e002      	b.n	8000838 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800083e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000842:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	4013      	ands	r3, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800084e:	2301      	movs	r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	e001      	b.n	8000858 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000858:	7dfb      	ldrb	r3, [r7, #23]
}
 800085a:	4618      	mov	r0, r3
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	4002640f 	.word	0x4002640f
 800086c:	40026000 	.word	0x40026000
 8000870:	40026400 	.word	0x40026400

08000874 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <DMA_ClearFlag+0x50>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d802      	bhi.n	800088c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <DMA_ClearFlag+0x54>)
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e001      	b.n	8000890 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <DMA_ClearFlag+0x58>)
 800088e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d007      	beq.n	80008aa <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008a0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80008a8:	e006      	b.n	80008b8 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008b0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	6093      	str	r3, [r2, #8]
  }    
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	4002640f 	.word	0x4002640f
 80008c8:	40026000 	.word	0x40026000
 80008cc:	40026400 	.word	0x40026400

080008d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e076      	b.n	80009da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008ec:	2201      	movs	r2, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d165      	bne.n	80009d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2103      	movs	r1, #3
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	401a      	ands	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	4619      	mov	r1, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d003      	beq.n	8000946 <GPIO_Init+0x76>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d12e      	bne.n	80009a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	4619      	mov	r1, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	431a      	orrs	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	b29b      	uxth	r3, r3
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	401a      	ands	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	799b      	ldrb	r3, [r3, #6]
 8000992:	4619      	mov	r1, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	b29b      	uxth	r3, r3
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	b29b      	uxth	r3, r3
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2103      	movs	r1, #3
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	79db      	ldrb	r3, [r3, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d985      	bls.n	80008ec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a0a:	e006      	b.n	8000a1a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4013      	ands	r3, r2
 8000a18:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a3e:	490a      	ldr	r1, [pc, #40]	; (8000a68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a4a:	e006      	b.n	8000a5a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4013      	ands	r3, r2
 8000a58:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a7e:	490a      	ldr	r1, [pc, #40]	; (8000aa8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a8a:	e006      	b.n	8000a9a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	4013      	ands	r3, r2
 8000a98:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	887a      	ldrh	r2, [r7, #2]
 8000abc:	819a      	strh	r2, [r3, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	891b      	ldrh	r3, [r3, #8]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e001      	b.n	8000af6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <TIM_TimeBaseInit+0xbc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d013      	beq.n	8000b48 <TIM_TimeBaseInit+0x44>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <TIM_TimeBaseInit+0xc0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00f      	beq.n	8000b48 <TIM_TimeBaseInit+0x44>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2e:	d00b      	beq.n	8000b48 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <TIM_TimeBaseInit+0xc4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d007      	beq.n	8000b48 <TIM_TimeBaseInit+0x44>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <TIM_TimeBaseInit+0xc8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <TIM_TimeBaseInit+0xcc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d108      	bne.n	8000b5a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b4e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	885a      	ldrh	r2, [r3, #2]
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <TIM_TimeBaseInit+0xd0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00c      	beq.n	8000b7c <TIM_TimeBaseInit+0x78>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <TIM_TimeBaseInit+0xd4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d008      	beq.n	8000b7c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b70:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	891a      	ldrh	r2, [r3, #8]
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	89fa      	ldrh	r2, [r7, #14]
 8000b80:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <TIM_TimeBaseInit+0xbc>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d003      	beq.n	8000ba2 <TIM_TimeBaseInit+0x9e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <TIM_TimeBaseInit+0xc0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d104      	bne.n	8000bac <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	7a9b      	ldrb	r3, [r3, #10]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	829a      	strh	r2, [r3, #20]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	40010400 	.word	0x40010400
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	40000c00 	.word	0x40000c00
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	40001400 	.word	0x40001400

08000bdc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bea:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	729a      	strb	r2, [r3, #10]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000c32:	e007      	b.n	8000c44 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	801a      	strh	r2, [r3, #0]
  }
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d008      	beq.n	8000c78 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	899b      	ldrh	r3, [r3, #12]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000c76:	e009      	b.n	8000c8c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	899b      	ldrh	r3, [r3, #12]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	819a      	strh	r2, [r3, #12]
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	81bb      	strh	r3, [r7, #12]
 8000cac:	2300      	movs	r3, #0
 8000cae:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	8a1b      	ldrh	r3, [r3, #16]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	899b      	ldrh	r3, [r3, #12]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <TIM_GetITStatus+0x42>
 8000cce:	897b      	ldrh	r3, [r7, #10]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e001      	b.n	8000cde <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	821a      	strh	r2, [r3, #16]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000d14:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <Audio_MAL_IRQHandler+0xe8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f7ff fd6c 	bl	80007fc <DMA_GetFlagStatus>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d062      	beq.n	8000df0 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d04a      	beq.n	8000dc8 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000d32:	bf00      	nop
 8000d34:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd47 	bl	80007cc <DMA_GetCmdStatus>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f7      	bne.n	8000d34 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <Audio_MAL_IRQHandler+0xe8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f7ff fd90 	bl	8000874 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <Audio_MAL_IRQHandler+0xf0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <Audio_MAL_IRQHandler+0xf4>)
 8000d5c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bf28      	it	cs
 8000d6a:	4613      	movcs	r3, r2
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <Audio_MAL_IRQHandler+0xf4>)
 8000d6e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4923      	ldr	r1, [pc, #140]	; (8000e04 <Audio_MAL_IRQHandler+0xf4>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fcb4 	bl	80006e4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fd06 	bl	8000794 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <Audio_MAL_IRQHandler+0xf0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf28      	it	cs
 8000d98:	460b      	movcs	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <Audio_MAL_IRQHandler+0xf0>)
 8000da0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dae:	428b      	cmp	r3, r1
 8000db0:	bf28      	it	cs
 8000db2:	460b      	movcs	r3, r1
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <Audio_MAL_IRQHandler+0xec>)
 8000db8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fce7 	bl	8000794 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000dc6:	e013      	b.n	8000df0 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fce0 	bl	8000794 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <Audio_MAL_IRQHandler+0xe4>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <Audio_MAL_IRQHandler+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4610      	mov	r0, r2
 8000de0:	f7ff fd48 	bl	8000874 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <Audio_MAL_IRQHandler+0xf0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fa1a 	bl	8001224 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000034 	.word	0x20000034
 8000e04:	20000074 	.word	0x20000074

08000e08 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000e0c:	f7ff ff80 	bl	8000d10 <Audio_MAL_IRQHandler>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000e18:	f7ff ff7a 	bl	8000d10 <Audio_MAL_IRQHandler>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000e24:	2102      	movs	r1, #2
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <SPI3_IRQHandler+0x3c>)
 8000e28:	f7ff fe50 	bl	8000acc <SPI_I2S_GetFlagStatus>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d011      	beq.n	8000e56 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <SPI3_IRQHandler+0x40>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d106      	bne.n	8000e48 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000e3a:	f000 f9ff 	bl	800123c <EVAL_AUDIO_GetSampleCallBack>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4619      	mov	r1, r3
 8000e42:	2004      	movs	r0, #4
 8000e44:	f7ff fc16 	bl	8000674 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000e48:	f000 f9f8 	bl	800123c <EVAL_AUDIO_GetSampleCallBack>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <SPI3_IRQHandler+0x3c>)
 8000e52:	f7ff fe2b 	bl	8000aac <SPI_I2S_SendData>
  }
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40003c00 	.word	0x40003c00
 8000e60:	20000004 	.word	0x20000004

08000e64 <ADC_init>:
#define ADC_NUM      ADC1
#define ADC_CHANNEL  ADC_Channel_15


void ADC_init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
   /* Enable peripheral clocks */
   RCC_AHB1PeriphClockCmd(IO_PORT_CLK, ENABLE);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f7ff fdbd 	bl	80009ec <RCC_AHB1PeriphClockCmd>
   RCC_APB2PeriphClockCmd(ADC_CLK, ENABLE);
 8000e72:	2101      	movs	r1, #1
 8000e74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e78:	f7ff fdf8 	bl	8000a6c <RCC_APB2PeriphClockCmd>
 
   /* Configure ADC Channel 10 pin as analog input */
   GPIO_InitTypeDef GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = IO_PIN;
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e90:	4619      	mov	r1, r3
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <ADC_init+0x98>)
 8000e94:	f7ff fd1c 	bl	80008d0 <GPIO_Init>
 
   /* ADC Common configuration *************************************************/
   ADC_CommonInitTypeDef ADC_CommonInitStructure;
   ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
   // APB2 clock is half the 168Mhz system clock (i.e. 84Mhz),
   // so with a div by 8, ADC PCLK would be 10.5Mhz.
   // F4 datasheet says ADC clock freq should be 0.6Mhz - 30Mhz for Vdda=3.3V
   ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
 8000e9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ea0:	61fb      	str	r3, [r7, #28]
   ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
   //TwoSamplingDelay is only used in dual and triple modes)
   ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;   
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
   ADC_CommonInit(&ADC_CommonInitStructure);
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fa42 	bl	8000338 <ADC_CommonInit>
 
   /* ADC1 regular channel 10 to 15 configuration ************************************/
   ADC_InitTypeDef ADC_InitStructure;
   ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
   ADC_InitStructure.ADC_ScanConvMode = DISABLE; // 1 Channel
 8000eb8:	2300      	movs	r3, #0
 8000eba:	713b      	strb	r3, [r7, #4]
   ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; // Conversions Triggered
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	717b      	strb	r3, [r7, #5]
   ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None; // Manual
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
   ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;  //Unused for manual?
 8000ec4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ec8:	60fb      	str	r3, [r7, #12]
   ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
   ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	753b      	strb	r3, [r7, #20]
   ADC_Init(ADC1, &ADC_InitStructure);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <ADC_init+0x9c>)
 8000ed8:	f7ff f9d8 	bl	800028c <ADC_Init>

   //The sample time is how long the input is sampled before the conversion is done.
   //Since PCLK is 10.5Mhz, 144 cycles is about 13.7uS and the DAC output rate is
   //running manually off a 44Khz timer interrupt (22uS), we should be fine
   //(once conversion starts, it takes about 16 cycles)
   ADC_RegularChannelConfig(ADC_NUM, ADC_CHANNEL, 1, ADC_SampleTime_144Cycles);
 8000edc:	2306      	movs	r3, #6
 8000ede:	2201      	movs	r2, #1
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <ADC_init+0x9c>)
 8000ee4:	f7ff fa6c 	bl	80003c0 <ADC_RegularChannelConfig>
 
   /* Enable ADC1 */
   ADC_Cmd(ADC_NUM, ENABLE);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <ADC_init+0x9c>)
 8000eec:	f7ff fa4c 	bl	8000388 <ADC_Cmd>

   ADC_start();
 8000ef0:	f000 f808 	bl	8000f04 <ADC_start>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40012000 	.word	0x40012000

08000f04 <ADC_start>:



void ADC_start(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
   ADC_SoftwareStartConv(ADC_NUM);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <ADC_start+0x10>)
 8000f0a:	f7ff fb23 	bl	8000554 <ADC_SoftwareStartConv>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40012000 	.word	0x40012000

08000f18 <ADC_get>:


//Get ADC value if the ADC is ready
//Returns value if successful, -1 if ADC wasn't done yet
int ADC_get(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
   //HACK - TESTING
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
 8000f1c:	bf00      	nop
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <ADC_get+0x30>)
 8000f20:	f7ff fb28 	bl	8000574 <ADC_GetSoftwareStartConvStatus>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <ADC_get+0x6>
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <ADC_get+0x30>)
 8000f2c:	f7ff fb22 	bl	8000574 <ADC_GetSoftwareStartConvStatus>
 8000f30:	4603      	mov	r3, r0
      ? ADC_GetConversionValue(ADC_NUM)
      : -1;
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d104      	bne.n	8000f40 <ADC_get+0x28>
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
      ? ADC_GetConversionValue(ADC_NUM)
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <ADC_get+0x30>)
 8000f38:	f7ff fb34 	bl	80005a4 <ADC_GetConversionValue>
 8000f3c:	4603      	mov	r3, r0
   //HACK - TESTING
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
 8000f3e:	e001      	b.n	8000f44 <ADC_get+0x2c>
      ? ADC_GetConversionValue(ADC_NUM)
      : -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40012000 	.word	0x40012000

08000f4c <DAC2_init>:




void DAC2_init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
   // Enable clocks for port A and DAC
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);  
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fd49 	bl	80009ec <RCC_AHB1PeriphClockCmd>
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000f60:	f7ff fd64 	bl	8000a2c <RCC_APB1PeriphClockCmd>
   
   // Set up PA.5 as DAC channel 2 output
   GPIO_InitTypeDef GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000f64:	2320      	movs	r3, #32
 8000f66:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	753b      	strb	r3, [r7, #20]
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	75fb      	strb	r3, [r7, #23]
   GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <DAC2_init+0x58>)
 8000f78:	f7ff fcaa 	bl	80008d0 <GPIO_Init>
   
   /* DAC channel 2 Configuration */
   DAC_InitTypeDef DAC_InitStructure;
   DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
   DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
   DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
   DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	2010      	movs	r0, #16
 8000f8e:	f7ff fb17 	bl	80005c0 <DAC_Init>

   /* Enable DAC Channel 2 */
   DAC_Cmd(DAC_Channel_2, ENABLE);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2010      	movs	r0, #16
 8000f96:	f7ff fb47 	bl	8000628 <DAC_Cmd>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <DAC2_set>:



void DAC2_set(uint16_t n)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
   if (DAC_MIN <= n  &&  n <= DAC_MAX) 
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb8:	d204      	bcs.n	8000fc4 <DAC2_set+0x1c>
      DAC_SetChannel2Data(DAC_Align_12b_R, n);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fb74 	bl	80006ac <DAC_SetChannel2Data>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <gsw_init>:
#define IO_PORT      GPIOC
#define IO_PORT_CLK  RCC_AHB1Periph_GPIOC


void gsw_init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  
   /* Enable the clock */
   RCC_AHB1PeriphClockCmd(IO_PORT_CLK, ENABLE);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f7ff fd09 	bl	80009ec <RCC_AHB1PeriphClockCmd>

   /* Configure the pin */
   GPIO_InitTypeDef  GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = IO_PIN;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	603b      	str	r3, [r7, #0]
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	713b      	strb	r3, [r7, #4]
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71bb      	strb	r3, [r7, #6]
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fea:	2302      	movs	r3, #2
 8000fec:	717b      	strb	r3, [r7, #5]
   GPIO_Init(IO_PORT, &GPIO_InitStructure);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <gsw_init+0x3c>)
 8000ff4:	f7ff fc6c 	bl	80008d0 <GPIO_Init>

   //Start with signal low
   IO_PORT->BSRRH = IO_PIN;  
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <gsw_init+0x3c>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	835a      	strh	r2, [r3, #26]
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800

0800100c <gsw_toggle>:



void gsw_toggle(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
   IO_PORT->ODR ^= IO_PIN;  
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <gsw_toggle+0x1c>)
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <gsw_toggle+0x1c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f083 0310 	eor.w	r3, r3, #16
 800101a:	6153      	str	r3, [r2, #20]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40020800 	.word	0x40020800

0800102c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	da0b      	bge.n	8001058 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001040:	490d      	ldr	r1, [pc, #52]	; (8001078 <NVIC_SetPriority+0x4c>)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	3b04      	subs	r3, #4
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001056:	e009      	b.n	800106c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001058:	4908      	ldr	r1, [pc, #32]	; (800107c <NVIC_SetPriority+0x50>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00
 800107c:	e000e100 	.word	0xe000e100

08001080 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108e:	d301      	bcc.n	8001094 <SysTick_Config+0x14>
 8001090:	2301      	movs	r3, #1
 8001092:	e011      	b.n	80010b8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800109c:	3b01      	subs	r3, #1
 800109e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80010a0:	210f      	movs	r1, #15
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	f7ff ffc1 	bl	800102c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SysTick_Config+0x40>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <main>:

//Local functions
float filter(register float val);

int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <main+0x30>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <main+0x34>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	099b      	lsrs	r3, r3, #6
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffd3 	bl	8001080 <SysTick_Config>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d000      	beq.n	80010e2 <main+0x1e>
		while (true);
 80010e0:	e7fe      	b.n	80010e0 <main+0x1c>
	}  // Capture error;

   gsw_init();
 80010e2:	f7ff ff73 	bl	8000fcc <gsw_init>
   ADC_init();
 80010e6:	f7ff febd 	bl	8000e64 <ADC_init>
   DAC2_init();
 80010ea:	f7ff ff2f 	bl	8000f4c <DAC2_init>
   tmr_sample_init();
 80010ee:	f000 f9c3 	bl	8001478 <tmr_sample_init>

   while (true);
 80010f2:	e7fe      	b.n	80010f2 <main+0x2e>
 80010f4:	20000010 	.word	0x20000010
 80010f8:	10624dd3 	.word	0x10624dd3

080010fc <TIM6_DAC_IRQHandler>:
//This interrupt routine is called from a timer interrupt, at a rate of 44Khz,
//which is a good sampling rate for audio
//(Although the default handler has 'DAC' in the name, we are just using this
// as generic timer interrupt)
void TIM6_DAC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
   if (TIM_GetITStatus(TIM6, TIM_IT_Update)) {
 8001102:	2101      	movs	r1, #1
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <TIM6_DAC_IRQHandler+0x78>)
 8001106:	f7ff fdc7 	bl	8000c98 <TIM_GetITStatus>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d02c      	beq.n	800116a <TIM6_DAC_IRQHandler+0x6e>
      //Process the ADC and DACs ...

      // Generate a square wave of approimately 880hz
      static int ctCycles=0;

      if (++ctCycles >= SAMPLE_FREQ/880/2) {
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <TIM6_DAC_IRQHandler+0x7c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <TIM6_DAC_IRQHandler+0x7c>)
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <TIM6_DAC_IRQHandler+0x7c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b18      	cmp	r3, #24
 8001120:	dd04      	ble.n	800112c <TIM6_DAC_IRQHandler+0x30>
         ctCycles = 0;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <TIM6_DAC_IRQHandler+0x7c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
         gsw_toggle();
 8001128:	f7ff ff70 	bl	800100c <gsw_toggle>
      }


      int n = ADC_get();
 800112c:	f7ff fef4 	bl	8000f18 <ADC_get>
 8001130:	60f8      	str	r0, [r7, #12]
      ADC_start();         //Start a new conversion
 8001132:	f7ff fee7 	bl	8000f04 <ADC_start>

      //Write filtered waveform to DAC
      // (Notch filter removes the DC offset in the original waveform,
      //  so we add it back in)
      DAC2_set((uint16_t)(DAC_MID + (int)filter(n)));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	f000 f81a 	bl	800117c <filter>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	edc7 7a01 	vstr	s15, [r7, #4]
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff23 	bl	8000fa8 <DAC2_set>


      TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8001162:	2101      	movs	r1, #1
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <TIM6_DAC_IRQHandler+0x78>)
 8001166:	f7ff fdc1 	bl	8000cec <TIM_ClearITPendingBit>
   }
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40001000 	.word	0x40001000
 8001178:	20000030 	.word	0x20000030

0800117c <filter>:

float filter(register float val)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	eef0 7a40 	vmov.f32	s15, s0
	val -= DAC_MID;
 8001186:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001214 <filter+0x98>
 800118a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float conv_sum = val*filter_coefficients[0], temp2 = 0, temp = ADC_array[0];
 800118e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001218 <filter+0x9c>
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	ed87 7a03 	vstr	s14, [r7, #12]
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <filter+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < NUM_COEFF - 1; ++i){
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	e023      	b.n	80011f4 <filter+0x78>
		conv_sum += temp*filter_coefficients[i+1];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <filter+0xa4>)
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	edd3 6a00 	vldr	s13, [r3]
 80011ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80011be:	ee26 7a87 	vmul.f32	s14, s13, s14
 80011c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80011ca:	ed87 7a03 	vstr	s14, [r7, #12]
		temp2 = temp;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	603b      	str	r3, [r7, #0]
		temp = ADC_array[i+1];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <filter+0xa0>)
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60bb      	str	r3, [r7, #8]
		ADC_array[i+1]= temp2;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <filter+0xa0>)
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]
float filter(register float val)
{
	val -= DAC_MID;
	float conv_sum = val*filter_coefficients[0], temp2 = 0, temp = ADC_array[0];

	for (int i = 0; i < NUM_COEFF - 1; ++i){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b2d      	cmp	r3, #45	; 0x2d
 80011f8:	ddd8      	ble.n	80011ac <filter+0x30>
		conv_sum += temp*filter_coefficients[i+1];
		temp2 = temp;
		temp = ADC_array[i+1];
		ADC_array[i+1]= temp2;
	}
	ADC_array[0]= val;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <filter+0xa0>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]

	return conv_sum;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ee07 3a90 	vmov	s15, r3
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	45000000 	.word	0x45000000
 8001218:	bb9cc36f 	.word	0xbb9cc36f
 800121c:	200000b0 	.word	0x200000b0
 8001220:	08001544 	.word	0x08001544

08001224 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800122e:	bf00      	nop
}
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001256:	e003      	b.n	8001260 <LoopCopyDataInit>

08001258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800125a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800125c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800125e:	3104      	adds	r1, #4

08001260 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001268:	d3f6      	bcc.n	8001258 <CopyDataInit>
  ldr  r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800126c:	e002      	b.n	8001274 <LoopFillZerobss>

0800126e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800126e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001270:	f842 3b04 	str.w	r3, [r2], #4

08001274 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001278:	d3f9      	bcc.n	800126e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127a:	f000 f84b 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f000 f92f 	bl	80014e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff ff1f 	bl	80010c4 <main>
  bx  lr    
 8001286:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001288:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800128c:	08001608 	.word	0x08001608
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001294:	20000014 	.word	0x20000014
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001298:	20000014 	.word	0x20000014
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800129c:	2000016c 	.word	0x2000016c

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80012b8:	e7fe      	b.n	80012b8 <HardFault_Handler+0x4>
 80012ba:	bf00      	nop

080012bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>
 80012c2:	bf00      	nop

080012c4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80012c8:	e7fe      	b.n	80012c8 <BusFault_Handler+0x4>
 80012ca:	bf00      	nop

080012cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>
 80012d2:	bf00      	nop

080012d4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4a16      	ldr	r2, [pc, #88]	; (8001374 <SystemInit+0x60>)
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <SystemInit+0x60>)
 800131c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <SystemInit+0x64>)
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <SystemInit+0x64>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <SystemInit+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <SystemInit+0x64>)
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SystemInit+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <SystemInit+0x64>)
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <SystemInit+0x68>)
 800134e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <SystemInit+0x64>)
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <SystemInit+0x64>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <SystemInit+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001362:	f000 f80d 	bl	8001380 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <SystemInit+0x60>)
 8001368:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136c:	609a      	str	r2, [r3, #8]
#endif
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	40023800 	.word	0x40023800
 800137c:	24003010 	.word	0x24003010

08001380 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800138e:	4a36      	ldr	r2, [pc, #216]	; (8001468 <SetSysClock+0xe8>)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <SetSysClock+0xe8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800139a:	4b33      	ldr	r3, [pc, #204]	; (8001468 <SetSysClock+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <SetSysClock+0x38>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013b6:	d1f0      	bne.n	800139a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <SetSysClock+0xe8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80013c4:	2301      	movs	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	e001      	b.n	80013ce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d142      	bne.n	800145a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80013d4:	4a24      	ldr	r2, [pc, #144]	; (8001468 <SetSysClock+0xe8>)
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <SetSysClock+0xe8>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <SetSysClock+0xec>)
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <SetSysClock+0xec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ea:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <SetSysClock+0xe8>)
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <SetSysClock+0xe8>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <SetSysClock+0xe8>)
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <SetSysClock+0xe8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <SetSysClock+0xe8>)
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <SetSysClock+0xe8>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800140a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <SetSysClock+0xe8>)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <SetSysClock+0xf0>)
 8001410:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <SetSysClock+0xe8>)
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <SetSysClock+0xe8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800141e:	bf00      	nop
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <SetSysClock+0xe8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f9      	beq.n	8001420 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <SetSysClock+0xf4>)
 800142e:	f240 6205 	movw	r2, #1541	; 0x605
 8001432:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <SetSysClock+0xe8>)
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <SetSysClock+0xe8>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <SetSysClock+0xe8>)
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <SetSysClock+0xe8>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800144c:	bf00      	nop
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SetSysClock+0xe8>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d1f9      	bne.n	800144e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000
 8001470:	07405408 	.word	0x07405408
 8001474:	40023c00 	.word	0x40023c00

08001478 <tmr_sample_init>:


// TIM6 configuration is based on CPU @168MHz and APB1 @84MHz
// TIM6 Update event occurs each 84Mhz/44Khz ~= 1909 ticks (44,002 Hz)
void tmr_sample_init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
   /* TIM6 Periph clock enable */
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800147e:	2101      	movs	r1, #1
 8001480:	2010      	movs	r0, #16
 8001482:	f7ff fad3 	bl	8000a2c <RCC_APB1PeriphClockCmd>

   /* Time base configuration */
   TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fba7 	bl	8000bdc <TIM_TimeBaseStructInit>
   TIM_TimeBaseStructure.TIM_Period = (int)(APB1_FREQ/SAMPLE_FREQ);     //44Khz DAC update rate, 16 bit period on TIM6                 
 800148e:	f240 7375 	movw	r3, #1909	; 0x775
 8001492:	60bb      	str	r3, [r7, #8]
   TIM_TimeBaseStructure.TIM_Prescaler = 0;       //Divide by 1
 8001494:	2300      	movs	r3, #0
 8001496:	80bb      	strh	r3, [r7, #4]
   TIM_TimeBaseStructure.TIM_ClockDivision = 0;   //No division
 8001498:	2300      	movs	r3, #0
 800149a:	81bb      	strh	r3, [r7, #12]
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; 
 800149c:	2300      	movs	r3, #0
 800149e:	80fb      	strh	r3, [r7, #6]
   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <tmr_sample_init+0x64>)
 80014a6:	f7ff fb2d 	bl	8000b04 <TIM_TimeBaseInit>

   //Set up TIM6 interrrupt
   NVIC_InitTypeDef NVIC_InitStructure;
   NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80014aa:	2336      	movs	r3, #54	; 0x36
 80014ac:	703b      	strb	r3, [r7, #0]
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	707b      	strb	r3, [r7, #1]
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	70bb      	strb	r3, [r7, #2]
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	70fb      	strb	r3, [r7, #3]
   NVIC_Init(&NVIC_InitStructure);
 80014ba:	463b      	mov	r3, r7
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fe83 	bl	80001c8 <NVIC_Init>
  
   /* TIM6 enable counter and interrupt */
   TIM_Cmd(TIM6, ENABLE);
 80014c2:	2101      	movs	r1, #1
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <tmr_sample_init+0x64>)
 80014c6:	f7ff fba3 	bl	8000c10 <TIM_Cmd>
   TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);  
 80014ca:	2201      	movs	r2, #1
 80014cc:	2101      	movs	r1, #1
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <tmr_sample_init+0x64>)
 80014d0:	f7ff fbbe 	bl	8000c50 <TIM_ITConfig>
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40001000 	.word	0x40001000

080014e0 <__libc_init_array>:
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <__libc_init_array+0x3c>)
 80014e4:	4c0e      	ldr	r4, [pc, #56]	; (8001520 <__libc_init_array+0x40>)
 80014e6:	1ae4      	subs	r4, r4, r3
 80014e8:	10a4      	asrs	r4, r4, #2
 80014ea:	2500      	movs	r5, #0
 80014ec:	461e      	mov	r6, r3
 80014ee:	42a5      	cmp	r5, r4
 80014f0:	d004      	beq.n	80014fc <__libc_init_array+0x1c>
 80014f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f6:	4798      	blx	r3
 80014f8:	3501      	adds	r5, #1
 80014fa:	e7f8      	b.n	80014ee <__libc_init_array+0xe>
 80014fc:	f000 f816 	bl	800152c <_init>
 8001500:	4c08      	ldr	r4, [pc, #32]	; (8001524 <__libc_init_array+0x44>)
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <__libc_init_array+0x48>)
 8001504:	1ae4      	subs	r4, r4, r3
 8001506:	10a4      	asrs	r4, r4, #2
 8001508:	2500      	movs	r5, #0
 800150a:	461e      	mov	r6, r3
 800150c:	42a5      	cmp	r5, r4
 800150e:	d004      	beq.n	800151a <__libc_init_array+0x3a>
 8001510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001514:	4798      	blx	r3
 8001516:	3501      	adds	r5, #1
 8001518:	e7f8      	b.n	800150c <__libc_init_array+0x2c>
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	08001600 	.word	0x08001600
 8001520:	08001600 	.word	0x08001600
 8001524:	08001604 	.word	0x08001604
 8001528:	08001600 	.word	0x08001600

0800152c <_init>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr

08001538 <_fini>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr
