
C:\Users\ttche\OneDrive\School Work\EEE4001F Digital Signal Processing\DSP_Project\DSP_1\Debug\DSP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001e1c  08001e1c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          000000a4  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b8  200000b8  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008c01  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016dd  00000000  00000000  00028c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b88  00000000  00000000  0002a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  0002aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c38  00000000  00000000  0002b930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003599  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00032b01  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030d4  00000000  00000000  00032b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00035c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e04 	.word	0x08001e04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001e04 	.word	0x08001e04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78db      	ldrb	r3, [r3, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d038      	beq.n	8000a8a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <NVIC_Init+0xbc>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	f1c3 0304 	rsb	r3, r3, #4
 8000a2c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a2e:	7b7a      	ldrb	r2, [r7, #13]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	fa42 f303 	asr.w	r3, r2, r3
 8000a36:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	789a      	ldrb	r2, [r3, #2]
 8000a4a:	7b7b      	ldrb	r3, [r7, #13]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <NVIC_Init+0xc0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <NVIC_Init+0xc0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	095b      	lsrs	r3, r3, #5
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a88:	e00f      	b.n	8000aaa <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a8a:	490c      	ldr	r1, [pc, #48]	; (8000abc <NVIC_Init+0xc0>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	095b      	lsrs	r3, r3, #5
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aa2:	f100 0320 	add.w	r3, r0, #32
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000aee:	4313      	orrs	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <ADC_Init+0xa8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b12:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b18:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	795b      	ldrb	r3, [r3, #5]
 8000b1e:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b20:	4313      	orrs	r3, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b3a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	051b      	lsls	r3, r3, #20
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	c0fff7fd 	.word	0xc0fff7fd

08000b6c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <ADC_CommonInit+0x48>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <ADC_CommonInit+0x4c>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b8e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b94:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b9a:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <ADC_CommonInit+0x48>)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6053      	str	r3, [r2, #4]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40012300 	.word	0x40012300
 8000bb8:	fffc30e0 	.word	0xfffc30e0

08000bbc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000bda:	e005      	b.n	8000be8 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 0201 	bic.w	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	609a      	str	r2, [r3, #8]
  }
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	70fb      	strb	r3, [r7, #3]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70bb      	strb	r3, [r7, #2]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	d923      	bls.n	8000c64 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	f1a3 020a 	sub.w	r2, r3, #10
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	2207      	movs	r2, #7
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c40:	7879      	ldrb	r1, [r7, #1]
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	f1a3 020a 	sub.w	r2, r3, #10
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	e01e      	b.n	8000ca2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	2207      	movs	r2, #7
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c84:	7879      	ldrb	r1, [r7, #1]
 8000c86:	78fa      	ldrb	r2, [r7, #3]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000ca2:	78bb      	ldrb	r3, [r7, #2]
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d821      	bhi.n	8000cec <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000cae:	78bb      	ldrb	r3, [r7, #2]
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	221f      	movs	r2, #31
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000cca:	78f9      	ldrb	r1, [r7, #3]
 8000ccc:	78bb      	ldrb	r3, [r7, #2]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000cea:	e047      	b.n	8000d7c <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d821      	bhi.n	8000d36 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	1fda      	subs	r2, r3, #7
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000d14:	78f9      	ldrb	r1, [r7, #3]
 8000d16:	78bb      	ldrb	r3, [r7, #2]
 8000d18:	1fda      	subs	r2, r3, #7
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d34:	e022      	b.n	8000d7c <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f1a3 020d 	sub.w	r2, r3, #13
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	221f      	movs	r2, #31
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d5a:	78f9      	ldrb	r1, [r7, #3]
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	f1a3 020d 	sub.w	r2, r3, #13
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	b29b      	uxth	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <DAC_Init+0x64>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000e0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e2c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <DAC_Init+0x64>)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40007400 	.word	0x40007400

08000e5c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d009      	beq.n	8000e82 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <DAC_Cmd+0x48>)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <DAC_Cmd+0x48>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2001      	movs	r0, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	fa00 f303 	lsl.w	r3, r0, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000e80:	e009      	b.n	8000e96 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <DAC_Cmd+0x48>)
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <DAC_Cmd+0x48>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2001      	movs	r0, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4013      	ands	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40007400 	.word	0x40007400

08000ea8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <DAC_SetChannel1Data+0x34>)
 8000eba:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40007400 	.word	0x40007400

08000ee0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <DAC_SetChannel2Data+0x34>)
 8000ef2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	3314      	adds	r3, #20
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	461a      	mov	r2, r3
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	6013      	str	r3, [r2, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007400 	.word	0x40007400

08000f18 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <DMA_Init+0xac>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f023 0307 	bic.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4313      	orrs	r3, r2
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	f01c803f 	.word	0xf01c803f

08000fc8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000fe6:	e005      	b.n	8000ff4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 0201 	bic.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	601a      	str	r2, [r3, #0]
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a15      	ldr	r2, [pc, #84]	; (800109c <DMA_GetFlagStatus+0x6c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d802      	bhi.n	8001050 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <DMA_GetFlagStatus+0x70>)
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e001      	b.n	8001054 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <DMA_GetFlagStatus+0x74>)
 8001052:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e002      	b.n	800106c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001072:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001076:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	e001      	b.n	800108c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	4002640f 	.word	0x4002640f
 80010a0:	40026000 	.word	0x40026000
 80010a4:	40026400 	.word	0x40026400

080010a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <DMA_ClearFlag+0x50>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d802      	bhi.n	80010c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <DMA_ClearFlag+0x54>)
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e001      	b.n	80010c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <DMA_ClearFlag+0x58>)
 80010c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80010d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80010dc:	e006      	b.n	80010ec <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80010e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	6093      	str	r3, [r2, #8]
  }    
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	4002640f 	.word	0x4002640f
 80010fc:	40026000 	.word	0x40026000
 8001100:	40026400 	.word	0x40026400

08001104 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e076      	b.n	800120e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001120:	2201      	movs	r2, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d165      	bne.n	8001208 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2103      	movs	r1, #3
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	401a      	ands	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	4619      	mov	r1, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d003      	beq.n	800117a <GPIO_Init+0x76>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d12e      	bne.n	80011d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2103      	movs	r1, #3
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	795b      	ldrb	r3, [r3, #5]
 8001198:	4619      	mov	r1, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	401a      	ands	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	799b      	ldrb	r3, [r3, #6]
 80011c6:	4619      	mov	r1, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2103      	movs	r1, #3
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	79db      	ldrb	r3, [r3, #7]
 80011f8:	4619      	mov	r1, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d985      	bls.n	8001120 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001232:	490a      	ldr	r1, [pc, #40]	; (800125c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800123e:	e006      	b.n	800124e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	43db      	mvns	r3, r3
 800124a:	4013      	ands	r3, r2
 800124c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <RCC_APB1PeriphClockCmd+0x3c>)
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <RCC_APB1PeriphClockCmd+0x3c>)
 8001276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800127e:	e006      	b.n	800128e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <RCC_APB1PeriphClockCmd+0x3c>)
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <RCC_APB1PeriphClockCmd+0x3c>)
 8001284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	43db      	mvns	r3, r3
 800128a:	4013      	ands	r3, r2
 800128c:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80012b2:	490a      	ldr	r1, [pc, #40]	; (80012dc <RCC_APB2PeriphClockCmd+0x3c>)
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <RCC_APB2PeriphClockCmd+0x3c>)
 80012b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80012be:	e006      	b.n	80012ce <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <RCC_APB2PeriphClockCmd+0x3c>)
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <RCC_APB2PeriphClockCmd+0x3c>)
 80012c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4013      	ands	r3, r2
 80012cc:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	819a      	strh	r2, [r3, #12]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	891b      	ldrh	r3, [r3, #8]
 8001314:	b29a      	uxth	r2, r3
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4013      	ands	r3, r2
 800131a:	b29b      	uxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e001      	b.n	800132a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <TIM_TimeBaseInit+0xbc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <TIM_TimeBaseInit+0x44>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <TIM_TimeBaseInit+0xc0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00f      	beq.n	800137c <TIM_TimeBaseInit+0x44>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001362:	d00b      	beq.n	800137c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <TIM_TimeBaseInit+0xc4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <TIM_TimeBaseInit+0x44>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <TIM_TimeBaseInit+0xc8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d003      	beq.n	800137c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a23      	ldr	r2, [pc, #140]	; (8001404 <TIM_TimeBaseInit+0xcc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d108      	bne.n	800138e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001382:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	885a      	ldrh	r2, [r3, #2]
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	4313      	orrs	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <TIM_TimeBaseInit+0xd0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00c      	beq.n	80013b0 <TIM_TimeBaseInit+0x78>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1c      	ldr	r2, [pc, #112]	; (800140c <TIM_TimeBaseInit+0xd4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d008      	beq.n	80013b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	891a      	ldrh	r2, [r3, #8]
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	89fa      	ldrh	r2, [r7, #14]
 80013b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <TIM_TimeBaseInit+0xbc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d003      	beq.n	80013d6 <TIM_TimeBaseInit+0x9e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <TIM_TimeBaseInit+0xc0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d104      	bne.n	80013e0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7a9b      	ldrb	r3, [r3, #10]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	829a      	strh	r2, [r3, #20]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40010400 	.word	0x40010400
 80013fc:	40000400 	.word	0x40000400
 8001400:	40000800 	.word	0x40000800
 8001404:	40000c00 	.word	0x40000c00
 8001408:	40001000 	.word	0x40001000
 800140c:	40001400 	.word	0x40001400

08001410 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	729a      	strb	r2, [r3, #10]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001466:	e007      	b.n	8001478 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	801a      	strh	r2, [r3, #0]
  }
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	899b      	ldrh	r3, [r3, #12]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80014aa:	e009      	b.n	80014c0 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	819a      	strh	r2, [r3, #12]
  }
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80014dc:	2300      	movs	r3, #0
 80014de:	81bb      	strh	r3, [r7, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	8a1b      	ldrh	r3, [r3, #16]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	4013      	ands	r3, r2
 80014ee:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	899b      	ldrh	r3, [r3, #12]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	4013      	ands	r3, r2
 80014fa:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <TIM_GetITStatus+0x42>
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	43db      	mvns	r3, r3
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	821a      	strh	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <Audio_MAL_IRQHandler+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f7ff fd6c 	bl	8001030 <DMA_GetFlagStatus>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d062      	beq.n	8001624 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d04a      	beq.n	80015fc <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001566:	bf00      	nop
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd47 	bl	8001000 <DMA_GetCmdStatus>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f7      	bne.n	8001568 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <Audio_MAL_IRQHandler+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f7ff fd90 	bl	80010a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <Audio_MAL_IRQHandler+0xf0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <Audio_MAL_IRQHandler+0xf4>)
 8001590:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	4293      	cmp	r3, r2
 800159c:	bf28      	it	cs
 800159e:	4613      	movcs	r3, r2
 80015a0:	4a25      	ldr	r2, [pc, #148]	; (8001638 <Audio_MAL_IRQHandler+0xf4>)
 80015a2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4923      	ldr	r1, [pc, #140]	; (8001638 <Audio_MAL_IRQHandler+0xf4>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fcb4 	bl	8000f18 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd06 	bl	8000fc8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <Audio_MAL_IRQHandler+0xf0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015c8:	428b      	cmp	r3, r1
 80015ca:	bf28      	it	cs
 80015cc:	460b      	movcs	r3, r1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	4a18      	ldr	r2, [pc, #96]	; (8001634 <Audio_MAL_IRQHandler+0xf0>)
 80015d4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015e2:	428b      	cmp	r3, r1
 80015e4:	bf28      	it	cs
 80015e6:	460b      	movcs	r3, r1
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <Audio_MAL_IRQHandler+0xec>)
 80015ec:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fce7 	bl	8000fc8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80015fa:	e013      	b.n	8001624 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fce0 	bl	8000fc8 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <Audio_MAL_IRQHandler+0xe4>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <Audio_MAL_IRQHandler+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fd48 	bl	80010a8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <Audio_MAL_IRQHandler+0xf0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fa50 	bl	8001ac4 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000008 	.word	0x20000008
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000000 	.word	0x20000000
 8001634:	2000003c 	.word	0x2000003c
 8001638:	2000007c 	.word	0x2000007c

0800163c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001640:	f7ff ff80 	bl	8001544 <Audio_MAL_IRQHandler>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800164c:	f7ff ff7a 	bl	8001544 <Audio_MAL_IRQHandler>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001658:	2102      	movs	r1, #2
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <SPI3_IRQHandler+0x3c>)
 800165c:	f7ff fe50 	bl	8001300 <SPI_I2S_GetFlagStatus>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d011      	beq.n	800168a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <SPI3_IRQHandler+0x40>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d106      	bne.n	800167c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800166e:	f000 fa35 	bl	8001adc <EVAL_AUDIO_GetSampleCallBack>
 8001672:	4603      	mov	r3, r0
 8001674:	4619      	mov	r1, r3
 8001676:	2004      	movs	r0, #4
 8001678:	f7ff fc16 	bl	8000ea8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800167c:	f000 fa2e 	bl	8001adc <EVAL_AUDIO_GetSampleCallBack>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <SPI3_IRQHandler+0x3c>)
 8001686:	f7ff fe2b 	bl	80012e0 <SPI_I2S_SendData>
  }
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40003c00 	.word	0x40003c00
 8001694:	20000004 	.word	0x20000004

08001698 <ADC_init>:
#define ADC_NUM      ADC1
#define ADC_CHANNEL  ADC_Channel_15


void ADC_init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
   /* Enable peripheral clocks */
   RCC_AHB1PeriphClockCmd(IO_PORT_CLK, ENABLE);
 800169e:	2101      	movs	r1, #1
 80016a0:	2004      	movs	r0, #4
 80016a2:	f7ff fdbd 	bl	8001220 <RCC_AHB1PeriphClockCmd>
   RCC_APB2PeriphClockCmd(ADC_CLK, ENABLE);
 80016a6:	2101      	movs	r1, #1
 80016a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ac:	f7ff fdf8 	bl	80012a0 <RCC_APB2PeriphClockCmd>
 
   /* Configure ADC Channel 10 pin as analog input */
   GPIO_InitTypeDef GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = IO_PIN;
 80016b0:	2320      	movs	r3, #32
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   GPIO_Init(GPIOC, &GPIO_InitStructure);
 80016c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <ADC_init+0x98>)
 80016c8:	f7ff fd1c 	bl	8001104 <GPIO_Init>
 
   /* ADC Common configuration *************************************************/
   ADC_CommonInitTypeDef ADC_CommonInitStructure;
   ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
   // APB2 clock is half the 168Mhz system clock (i.e. 84Mhz),
   // so with a div by 8, ADC PCLK would be 10.5Mhz.
   // F4 datasheet says ADC clock freq should be 0.6Mhz - 30Mhz for Vdda=3.3V
   ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
 80016d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016d4:	61fb      	str	r3, [r7, #28]
   ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
   //TwoSamplingDelay is only used in dual and triple modes)
   ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;   
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
   ADC_CommonInit(&ADC_CommonInitStructure);
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa42 	bl	8000b6c <ADC_CommonInit>
 
   /* ADC1 regular channel 10 to 15 configuration ************************************/
   ADC_InitTypeDef ADC_InitStructure;
   ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80016e8:	2300      	movs	r3, #0
 80016ea:	603b      	str	r3, [r7, #0]
   ADC_InitStructure.ADC_ScanConvMode = DISABLE; // 1 Channel
 80016ec:	2300      	movs	r3, #0
 80016ee:	713b      	strb	r3, [r7, #4]
   ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; // Conversions Triggered
 80016f0:	2300      	movs	r3, #0
 80016f2:	717b      	strb	r3, [r7, #5]
   ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None; // Manual
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
   ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;  //Unused for manual?
 80016f8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80016fc:	60fb      	str	r3, [r7, #12]
   ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
   ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	753b      	strb	r3, [r7, #20]
   ADC_Init(ADC1, &ADC_InitStructure);
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <ADC_init+0x9c>)
 800170c:	f7ff f9d8 	bl	8000ac0 <ADC_Init>

   //The sample time is how long the input is sampled before the conversion is done.
   //Since PCLK is 10.5Mhz, 144 cycles is about 13.7uS and the DAC output rate is
   //running manually off a 44Khz timer interrupt (22uS), we should be fine
   //(once conversion starts, it takes about 16 cycles)
   ADC_RegularChannelConfig(ADC_NUM, ADC_CHANNEL, 1, ADC_SampleTime_144Cycles);
 8001710:	2306      	movs	r3, #6
 8001712:	2201      	movs	r2, #1
 8001714:	210f      	movs	r1, #15
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <ADC_init+0x9c>)
 8001718:	f7ff fa6c 	bl	8000bf4 <ADC_RegularChannelConfig>
 
   /* Enable ADC1 */
   ADC_Cmd(ADC_NUM, ENABLE);
 800171c:	2101      	movs	r1, #1
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <ADC_init+0x9c>)
 8001720:	f7ff fa4c 	bl	8000bbc <ADC_Cmd>

   ADC_start();
 8001724:	f000 f808 	bl	8001738 <ADC_start>
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40020800 	.word	0x40020800
 8001734:	40012000 	.word	0x40012000

08001738 <ADC_start>:



void ADC_start(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
   ADC_SoftwareStartConv(ADC_NUM);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <ADC_start+0x10>)
 800173e:	f7ff fb23 	bl	8000d88 <ADC_SoftwareStartConv>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012000 	.word	0x40012000

0800174c <ADC_get>:


//Get ADC value if the ADC is ready
//Returns value if successful, -1 if ADC wasn't done yet
int ADC_get(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   //HACK - TESTING
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
 8001750:	bf00      	nop
 8001752:	480a      	ldr	r0, [pc, #40]	; (800177c <ADC_get+0x30>)
 8001754:	f7ff fb28 	bl	8000da8 <ADC_GetSoftwareStartConvStatus>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <ADC_get+0x6>
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <ADC_get+0x30>)
 8001760:	f7ff fb22 	bl	8000da8 <ADC_GetSoftwareStartConvStatus>
 8001764:	4603      	mov	r3, r0
      ? ADC_GetConversionValue(ADC_NUM)
      : -1;
 8001766:	2b00      	cmp	r3, #0
 8001768:	d104      	bne.n	8001774 <ADC_get+0x28>
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
      ? ADC_GetConversionValue(ADC_NUM)
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <ADC_get+0x30>)
 800176c:	f7ff fb34 	bl	8000dd8 <ADC_GetConversionValue>
 8001770:	4603      	mov	r3, r0
   //HACK - TESTING
   while (ADC_GetSoftwareStartConvStatus(ADC_NUM) != RESET)
      ;
   //HACK - TESTING
   
   return (ADC_GetSoftwareStartConvStatus(ADC_NUM) == RESET)
 8001772:	e001      	b.n	8001778 <ADC_get+0x2c>
      ? ADC_GetConversionValue(ADC_NUM)
      : -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40012000 	.word	0x40012000

08001780 <DAC2_init>:




void DAC2_init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
   // Enable clocks for port A and DAC
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);  
 8001786:	2101      	movs	r1, #1
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fd49 	bl	8001220 <RCC_AHB1PeriphClockCmd>
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800178e:	2101      	movs	r1, #1
 8001790:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001794:	f7ff fd64 	bl	8001260 <RCC_APB1PeriphClockCmd>
   
   // Set up PA.5 as DAC channel 2 output
   GPIO_InitTypeDef GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8001798:	2320      	movs	r3, #32
 800179a:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800179c:	2303      	movs	r3, #3
 800179e:	753b      	strb	r3, [r7, #20]
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
   GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <DAC2_init+0x58>)
 80017ac:	f7ff fcaa 	bl	8001104 <GPIO_Init>
   
   /* DAC channel 2 Configuration */
   DAC_InitTypeDef DAC_InitStructure;
   DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
   DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
   DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
   DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	2010      	movs	r0, #16
 80017c2:	f7ff fb17 	bl	8000df4 <DAC_Init>

   /* Enable DAC Channel 2 */
   DAC_Cmd(DAC_Channel_2, ENABLE);
 80017c6:	2101      	movs	r1, #1
 80017c8:	2010      	movs	r0, #16
 80017ca:	f7ff fb47 	bl	8000e5c <DAC_Cmd>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020000 	.word	0x40020000

080017dc <DAC2_set>:



void DAC2_set(uint16_t n)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
   if (DAC_MIN <= n  &&  n <= DAC_MAX) 
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ec:	d204      	bcs.n	80017f8 <DAC2_set+0x1c>
      DAC_SetChannel2Data(DAC_Align_12b_R, n);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fb74 	bl	8000ee0 <DAC_SetChannel2Data>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <gsw_init>:
#define IO_PORT      GPIOC
#define IO_PORT_CLK  RCC_AHB1Periph_GPIOC


void gsw_init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  
   /* Enable the clock */
   RCC_AHB1PeriphClockCmd(IO_PORT_CLK, ENABLE);
 8001806:	2101      	movs	r1, #1
 8001808:	2004      	movs	r0, #4
 800180a:	f7ff fd09 	bl	8001220 <RCC_AHB1PeriphClockCmd>

   /* Configure the pin */
   GPIO_InitTypeDef  GPIO_InitStructure;
   GPIO_InitStructure.GPIO_Pin = IO_PIN;
 800180e:	2310      	movs	r3, #16
 8001810:	603b      	str	r3, [r7, #0]
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001812:	2301      	movs	r3, #1
 8001814:	713b      	strb	r3, [r7, #4]
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001816:	2300      	movs	r3, #0
 8001818:	71bb      	strb	r3, [r7, #6]
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800181e:	2302      	movs	r3, #2
 8001820:	717b      	strb	r3, [r7, #5]
   GPIO_Init(IO_PORT, &GPIO_InitStructure);
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <gsw_init+0x3c>)
 8001828:	f7ff fc6c 	bl	8001104 <GPIO_Init>

   //Start with signal low
   IO_PORT->BSRRH = IO_PIN;  
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <gsw_init+0x3c>)
 800182e:	2210      	movs	r2, #16
 8001830:	835a      	strh	r2, [r3, #26]
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020800 	.word	0x40020800

08001840 <gsw_toggle>:



void gsw_toggle(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
   IO_PORT->ODR ^= IO_PIN;  
 8001844:	4a05      	ldr	r2, [pc, #20]	; (800185c <gsw_toggle+0x1c>)
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <gsw_toggle+0x1c>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f083 0310 	eor.w	r3, r3, #16
 800184e:	6153      	str	r3, [r2, #20]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40020800 	.word	0x40020800

08001860 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da0b      	bge.n	800188c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001874:	490d      	ldr	r1, [pc, #52]	; (80018ac <NVIC_SetPriority+0x4c>)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	3b04      	subs	r3, #4
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800188a:	e009      	b.n	80018a0 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800188c:	4908      	ldr	r1, [pc, #32]	; (80018b0 <NVIC_SetPriority+0x50>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c2:	d301      	bcc.n	80018c8 <SysTick_Config+0x14>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e011      	b.n	80018ec <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018d0:	3b01      	subs	r3, #1
 80018d2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80018d4:	210f      	movs	r1, #15
 80018d6:	f04f 30ff 	mov.w	r0, #4294967295
 80018da:	f7ff ffc1 	bl	8001860 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <SysTick_Config+0x40>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <main>:




int main(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
   if (SysTick_Config(SystemCoreClock/1000)) {
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <main+0x30>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <main+0x34>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ffd3 	bl	80018b4 <SysTick_Config>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d000      	beq.n	8001916 <main+0x1e>
      while (true)  // Capture error
          ;
 8001914:	e7fe      	b.n	8001914 <main+0x1c>
   }

   gsw_init();
 8001916:	f7ff ff73 	bl	8001800 <gsw_init>
   ADC_init();
 800191a:	f7ff febd 	bl	8001698 <ADC_init>
   DAC2_init();
 800191e:	f7ff ff2f 	bl	8001780 <DAC2_init>
   tmr_sample_init();
 8001922:	f000 f9f9 	bl	8001d18 <tmr_sample_init>

   while (true)
      ;
 8001926:	e7fe      	b.n	8001926 <main+0x2e>
 8001928:	20000010 	.word	0x20000010
 800192c:	10624dd3 	.word	0x10624dd3

08001930 <TIM6_DAC_IRQHandler>:
//This interrupt routine is called from a timer interrupt, at a rate of 44Khz,
//which is a good sampling rate for audio
//(Although the default handler has 'DAC' in the name, we are just using this
// as generic timer interrupt)
void TIM6_DAC_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
   if (TIM_GetITStatus(TIM6, TIM_IT_Update)) {
 8001936:	2101      	movs	r1, #1
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <TIM6_DAC_IRQHandler+0x78>)
 800193a:	f7ff fdc7 	bl	80014cc <TIM_GetITStatus>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d02c      	beq.n	800199e <TIM6_DAC_IRQHandler+0x6e>
      //Process the ADC and DACs ...

      // Generate a square wave of approimately 880hz
      static int ctCycles=0;

      if (++ctCycles >= SAMPLE_FREQ/880/2) {
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <TIM6_DAC_IRQHandler+0x7c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <TIM6_DAC_IRQHandler+0x7c>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <TIM6_DAC_IRQHandler+0x7c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b18      	cmp	r3, #24
 8001954:	dd04      	ble.n	8001960 <TIM6_DAC_IRQHandler+0x30>
         ctCycles = 0;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <TIM6_DAC_IRQHandler+0x7c>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
         gsw_toggle();
 800195c:	f7ff ff70 	bl	8001840 <gsw_toggle>
      }


      int n = ADC_get();
 8001960:	f7ff fef4 	bl	800174c <ADC_get>
 8001964:	60f8      	str	r0, [r7, #12]
      ADC_start();         //Start a new conversion
 8001966:	f7ff fee7 	bl	8001738 <ADC_start>

      //Write filtered waveform to DAC
      // (Notch filter removes the DC offset in the original waveform,
      //  so we add it back in)
      DAC2_set((uint16_t)(DAC_MID + (int)filter(n)));
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f000 f81a 	bl	80019b0 <filter>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	edc7 7a01 	vstr	s15, [r7, #4]
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff23 	bl	80017dc <DAC2_set>


      TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8001996:	2101      	movs	r1, #1
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <TIM6_DAC_IRQHandler+0x78>)
 800199a:	f7ff fdc1 	bl	8001520 <TIM_ClearITPendingBit>
   }
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40001000 	.word	0x40001000
 80019ac:	20000030 	.word	0x20000030

080019b0 <filter>:
// Filter descriptions:
//   BpRe/50/880 == Bandpass resonator, Q=50 (0 means Inf), frequency 880
//
// Example code (optimised for cleaner compilation to efficient machine code)
float filter(register float val)
{
 80019b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b2:	ed2d 8b02 	vpush	{d8}
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	ee10 5a10 	vmov	r5, s0
   static float buf[2];
   register float tmp, fir, iir;
   tmp= buf[0]; memmove(buf, buf+1, 1*sizeof(float));
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <filter+0x108>)
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <filter+0x10c>)
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	483c      	ldr	r0, [pc, #240]	; (8001ab8 <filter+0x108>)
 80019c8:	f000 fa00 	bl	8001dcc <memmove>

   iir= val * 0.001255059246835381 * 0.75;
 80019cc:	4628      	mov	r0, r5
 80019ce:	f7fe fd5f 	bl	8000490 <__aeabi_f2d>
 80019d2:	a333      	add	r3, pc, #204	; (adr r3, 8001aa0 <filter+0xf0>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fdae 	bl	8000538 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <filter+0x110>)
 80019ea:	f7fe fda5 	bl	8000538 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7fe ffb1 	bl	800095c <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	ee08 3a90 	vmov	s17, r3
   iir -= 0.9974898815063291*tmp; fir= -tmp;
 8001a00:	ee18 0a90 	vmov	r0, s17
 8001a04:	f7fe fd44 	bl	8000490 <__aeabi_f2d>
 8001a08:	4605      	mov	r5, r0
 8001a0a:	460e      	mov	r6, r1
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7fe fd3f 	bl	8000490 <__aeabi_f2d>
 8001a12:	a325      	add	r3, pc, #148	; (adr r3, 8001aa8 <filter+0xf8>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fd8e 	bl	8000538 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4628      	mov	r0, r5
 8001a22:	4631      	mov	r1, r6
 8001a24:	f7fe fbd4 	bl	80001d0 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7fe ff94 	bl	800095c <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	ee08 3a90 	vmov	s17, r3
 8001a3a:	ee07 4a90 	vmov	s15, r4
 8001a3e:	eeb1 8a67 	vneg.f32	s16, s15
   iir -= -1.981739077169366*buf[0];
 8001a42:	ee18 0a90 	vmov	r0, s17
 8001a46:	f7fe fd23 	bl	8000490 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <filter+0x108>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd1c 	bl	8000490 <__aeabi_f2d>
 8001a58:	a315      	add	r3, pc, #84	; (adr r3, 8001ab0 <filter+0x100>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fd6b 	bl	8000538 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7fe fbb3 	bl	80001d4 <__adddf3>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	4618      	mov	r0, r3
 8001a74:	4621      	mov	r1, r4
 8001a76:	f7fe ff71 	bl	800095c <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	ee08 3a90 	vmov	s17, r3

   fir += iir;
 8001a80:	ee38 8a28 	vadd.f32	s16, s16, s17
   buf[1]= iir; val= fir;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <filter+0x108>)
 8001a86:	edc3 8a01 	vstr	s17, [r3, #4]
 8001a8a:	ee18 5a10 	vmov	r5, s16
   return val;
 8001a8e:	462b      	mov	r3, r5
 8001a90:	ee07 3a90 	vmov	s15, r3
}
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	ecbd 8b02 	vpop	{d8}
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	9adc5ede 	.word	0x9adc5ede
 8001aa4:	3f549019 	.word	0x3f549019
 8001aa8:	e66523a0 	.word	0xe66523a0
 8001aac:	3fefeb6f 	.word	0x3fefeb6f
 8001ab0:	08da5cc3 	.word	0x08da5cc3
 8001ab4:	3fffb534 	.word	0x3fffb534
 8001ab8:	20000034 	.word	0x20000034
 8001abc:	20000038 	.word	0x20000038
 8001ac0:	3fe80000 	.word	0x3fe80000

08001ac4 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001ace:	bf00      	nop
}
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
  ldr  r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1a:	f000 f84b 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f000 f92f 	bl	8001d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fee9 	bl	80018f8 <main>
  bx  lr    
 8001b26:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b28:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001b2c:	08001e24 	.word	0x08001e24
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b34:	20000014 	.word	0x20000014
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001b38:	20000014 	.word	0x20000014
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b3c:	200000b8 	.word	0x200000b8

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001b58:	e7fe      	b.n	8001b58 <HardFault_Handler+0x4>
 8001b5a:	bf00      	nop

08001b5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>
 8001b62:	bf00      	nop

08001b64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001b68:	e7fe      	b.n	8001b68 <BusFault_Handler+0x4>
 8001b6a:	bf00      	nop

08001b6c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>
 8001b72:	bf00      	nop

08001b74 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <SystemInit+0x60>)
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <SystemInit+0x60>)
 8001bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <SystemInit+0x64>)
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <SystemInit+0x64>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <SystemInit+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <SystemInit+0x64>)
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <SystemInit+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <SystemInit+0x64>)
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <SystemInit+0x68>)
 8001bee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <SystemInit+0x64>)
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <SystemInit+0x64>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001c02:	f000 f80d 	bl	8001c20 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <SystemInit+0x60>)
 8001c08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0c:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	24003010 	.word	0x24003010

08001c20 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c2e:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <SetSysClock+0xe8>)
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <SetSysClock+0xe8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <SetSysClock+0xe8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <SetSysClock+0x38>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c56:	d1f0      	bne.n	8001c3a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <SetSysClock+0xe8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001c64:	2301      	movs	r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	e001      	b.n	8001c6e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d142      	bne.n	8001cfa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001c74:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <SetSysClock+0xe8>)
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <SetSysClock+0xe8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <SetSysClock+0xec>)
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <SetSysClock+0xec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <SetSysClock+0xe8>)
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <SetSysClock+0xe8>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001c94:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <SetSysClock+0xe8>)
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <SetSysClock+0xe8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <SetSysClock+0xe8>)
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <SetSysClock+0xe8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001caa:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <SetSysClock+0xe8>)
 8001cae:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <SetSysClock+0xf0>)
 8001cb0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <SetSysClock+0xe8>)
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <SetSysClock+0xe8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001cbe:	bf00      	nop
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <SetSysClock+0xe8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f9      	beq.n	8001cc0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <SetSysClock+0xf4>)
 8001cce:	f240 6205 	movw	r2, #1541	; 0x605
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <SetSysClock+0xe8>)
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <SetSysClock+0xe8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <SetSysClock+0xe8>)
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <SetSysClock+0xe8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001cec:	bf00      	nop
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SetSysClock+0xe8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d1f9      	bne.n	8001cee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	07405408 	.word	0x07405408
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <tmr_sample_init>:


// TIM6 configuration is based on CPU @168MHz and APB1 @84MHz
// TIM6 Update event occurs each 84Mhz/44Khz ~= 1909 ticks (44,002 Hz)
void tmr_sample_init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
   /* TIM6 Periph clock enable */
   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	2010      	movs	r0, #16
 8001d22:	f7ff fa9d 	bl	8001260 <RCC_APB1PeriphClockCmd>

   /* Time base configuration */
   TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb71 	bl	8001410 <TIM_TimeBaseStructInit>
   TIM_TimeBaseStructure.TIM_Period = (int)(APB1_FREQ/SAMPLE_FREQ);     //44Khz DAC update rate, 16 bit period on TIM6                 
 8001d2e:	f240 7375 	movw	r3, #1909	; 0x775
 8001d32:	60bb      	str	r3, [r7, #8]
   TIM_TimeBaseStructure.TIM_Prescaler = 0;       //Divide by 1
 8001d34:	2300      	movs	r3, #0
 8001d36:	80bb      	strh	r3, [r7, #4]
   TIM_TimeBaseStructure.TIM_ClockDivision = 0;   //No division
 8001d38:	2300      	movs	r3, #0
 8001d3a:	81bb      	strh	r3, [r7, #12]
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; 
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	80fb      	strh	r3, [r7, #6]
   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <tmr_sample_init+0x64>)
 8001d46:	f7ff faf7 	bl	8001338 <TIM_TimeBaseInit>

   //Set up TIM6 interrrupt
   NVIC_InitTypeDef NVIC_InitStructure;
   NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8001d4a:	2336      	movs	r3, #54	; 0x36
 8001d4c:	703b      	strb	r3, [r7, #0]
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	707b      	strb	r3, [r7, #1]
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	70bb      	strb	r3, [r7, #2]
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	70fb      	strb	r3, [r7, #3]
   NVIC_Init(&NVIC_InitStructure);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fe4d 	bl	80009fc <NVIC_Init>
  
   /* TIM6 enable counter and interrupt */
   TIM_Cmd(TIM6, ENABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <tmr_sample_init+0x64>)
 8001d66:	f7ff fb6d 	bl	8001444 <TIM_Cmd>
   TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);  
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <tmr_sample_init+0x64>)
 8001d70:	f7ff fb88 	bl	8001484 <TIM_ITConfig>
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40001000 	.word	0x40001000

08001d80 <__libc_init_array>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <__libc_init_array+0x3c>)
 8001d84:	4c0e      	ldr	r4, [pc, #56]	; (8001dc0 <__libc_init_array+0x40>)
 8001d86:	1ae4      	subs	r4, r4, r3
 8001d88:	10a4      	asrs	r4, r4, #2
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	461e      	mov	r6, r3
 8001d8e:	42a5      	cmp	r5, r4
 8001d90:	d004      	beq.n	8001d9c <__libc_init_array+0x1c>
 8001d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d96:	4798      	blx	r3
 8001d98:	3501      	adds	r5, #1
 8001d9a:	e7f8      	b.n	8001d8e <__libc_init_array+0xe>
 8001d9c:	f000 f832 	bl	8001e04 <_init>
 8001da0:	4c08      	ldr	r4, [pc, #32]	; (8001dc4 <__libc_init_array+0x44>)
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <__libc_init_array+0x48>)
 8001da4:	1ae4      	subs	r4, r4, r3
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	2500      	movs	r5, #0
 8001daa:	461e      	mov	r6, r3
 8001dac:	42a5      	cmp	r5, r4
 8001dae:	d004      	beq.n	8001dba <__libc_init_array+0x3a>
 8001db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db4:	4798      	blx	r3
 8001db6:	3501      	adds	r5, #1
 8001db8:	e7f8      	b.n	8001dac <__libc_init_array+0x2c>
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
 8001dbc:	08001e1c 	.word	0x08001e1c
 8001dc0:	08001e1c 	.word	0x08001e1c
 8001dc4:	08001e20 	.word	0x08001e20
 8001dc8:	08001e1c 	.word	0x08001e1c

08001dcc <memmove>:
 8001dcc:	4288      	cmp	r0, r1
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	eb01 0302 	add.w	r3, r1, r2
 8001dd4:	d801      	bhi.n	8001dda <memmove+0xe>
 8001dd6:	1e42      	subs	r2, r0, #1
 8001dd8:	e00b      	b.n	8001df2 <memmove+0x26>
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	d2fb      	bcs.n	8001dd6 <memmove+0xa>
 8001dde:	1881      	adds	r1, r0, r2
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	42d3      	cmn	r3, r2
 8001de4:	d004      	beq.n	8001df0 <memmove+0x24>
 8001de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001dea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001dee:	e7f8      	b.n	8001de2 <memmove+0x16>
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	4299      	cmp	r1, r3
 8001df4:	d004      	beq.n	8001e00 <memmove+0x34>
 8001df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dfa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001dfe:	e7f8      	b.n	8001df2 <memmove+0x26>
 8001e00:	bd10      	pop	{r4, pc}
	...

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
